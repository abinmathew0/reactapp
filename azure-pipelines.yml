trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '26356803-ca7e-4667-9d33-49129a610108'
  imageRepository: 'my-react-app'
  containerRegistry: 'myreactappacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'myreactappacr-auth'
  vmImageName: 'Default'
  azureSubscription: 'myconn'
  kubernetesServiceConnection: 'my-react-app-aks-default'
  resourceGroup: 'RG1'
  clusterName: 'my-react-app-aks'
  namespace: 'default'
  helmReleaseName: 'my-react-app'
  helmTimeout: '10m'  # Added timeout variable

stages:
- stage: Build
  displayName: Build and push image
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push image to ACR
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Helm Chart'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/react-app-chart'
        artifact: 'helm-chart'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      name: $(vmImageName)
    environment: 'aks-dev'
    strategy:
      runOnce:
        deploy:
          steps:
          # Updated Kubernetes manifest task with correct parameter
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretType: dockerRegistry
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)  # Changed from kubernetesServiceConnection
              namespace: $(namespace)

          # Helm deployment task
          - task: HelmDeploy@1
            displayName: Deploy with Helm
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)  # Consistent parameter name
              namespace: $(namespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/helm-chart'
              releaseName: $(helmReleaseName)
              arguments: '--install --wait --timeout $(helmTimeout) --set image.repository=$(containerRegistry)/$(imageRepository) --set image.tag=$(tag)'
              valueFile: '$(Pipeline.Workspace)/helm-chart/values.yaml'